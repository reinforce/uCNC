##############
# AVR Boards #
##############

[common_avr]
platform = atmelavr
; platform_packages = platformio/tool-simavr
framework = arduino
; build_src_filter = +<*>-<src/tinyusb>
extra_scripts = 
	${env.extra_scripts}
	avr_compiler.py
debug_tool = simavr
debug_build_flags = -Og -g3 -ggdb3 -gdwarf-2
build_flags = ${env.build_flags} -std=gnu99 -Wall -fdata-sections -ffunction-sections -fno-exceptions -Wl,--gc-sections -mcall-prologues -mrelax -flto -fno-fat-lto-objects -fno-tree-scev-cprop -Wl,--relax
lib_deps = ${env.lib_deps}
; lib_ignore = EEPROM, SPI, Wire

; If your board has Arduino original bootloader you should use this version
; You can select the target board according to the list detailed in PlatformIO
; https://docs.platformio.org/en/latest/frameworks/arduino.html#id3
[avr_arduino]
extends = common_avr
board = uno

; If your board has MiniCore (urboot) bootloader you should use this version
; Note that you need to change the board to match one of the supporting microcontrollers by MiniCore
; The supported list of microcontrollers is here https://github.com/MCUdude/MiniCore?tab=readme-ov-file#supported-microcontrollers
[avr_minicore]
extends = common_avr
board = Atmega328P
;use avrminicore 
platform_packages=platformio/framework-arduino-avr-minicore@^3.0.0

; several UNO boards (including Mini and Nano variants) have been seen with some variants of the Atmega328P chip
; some boards come with Atmega328P others with Atmega328P(U/A/B) variants.
; also some these chips have been fitted with the Urboot bootloader (instead of the original Arduino bootloader)
; they are not interchangeable as frequently you will get signature errors and byte mismatching errors during verification and programming
; you may need to adjust the board base config (extends = ) to match the flavor of your board

[env:AVR-UNO]
extends = avr_arduino
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_UNO

[env:AVR-CNC-Shield-V3]
extends = avr_arduino
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_UNO_SHIELD_V3

[env:AVR-X-Controller]
extends = avr_arduino
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_X_CONTROLLER

[env:AVR-MKS-DLC]
extends = avr_arduino
board_build.f_cpu = 20000000UL
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_MKS_DLC

[env:AVR-MEGA2560-RAMPS-V1_4]
extends = common_avr
board = megaatmega2560
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_RAMPS14

; [env:ramps14mirror]
; extends = common_avr
; board = megaatmega2560
; build_flags = ${common_avr.build_flags} -D BOARD=BOARD_RAMPS14_MIRROR

[env:AVR-MKS-GEN-L-V1]
extends = common_avr
board = megaatmega2560
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_MKS_GEN_L_V1

[env:AVR-RAMBO]
extends = common_avr
board = megaatmega2560
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_RAMBO14

[env:AVR-MELZI-V1_1_4]
extends = common_avr
board = sanguino_atmega1284p
board_upload.maximum_size = 126976
build_flags = ${common_avr.build_flags} -D BOARD=BOARD_MELZI_V1_1_4

[env:AVR-CUSTOM]
extends = common_avr
build_flags = ${common_avr.build_flags} -DMCU=MCU_CUSTOM
board = ${env.board}
